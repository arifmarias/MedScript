"""
MedScript Pro - PDF Generation Service
This file handles professional prescription PDF generation with medical formatting.
"""

import io
import qrcode
from datetime import datetime, date
from typing import Dict, List, Any, Optional, Tuple
from fpdf import FPDF
import streamlit as st
from config.settings import PDF_CONFIG, APP_NAME, APP_VERSION, FEATURE_FLAGS
from utils.formatters import (
    format_patient_name, format_user_name, format_date_display,
    format_phone_number, format_medication_dosage
)

class PrescriptionPDF(FPDF):
    """Custom PDF class for prescription generation"""
    
    def __init__(self, prescription_data: Dict[str, Any]):
        super().__init__()
        self.prescription_data = prescription_data
        self.set_auto_page_break(auto=True, margin=PDF_CONFIG['MARGINS']['BOTTOM'])
        
        # Colors
        self.header_color = (0, 150, 199)  # Primary blue
        self.text_color = (52, 58, 64)     # Dark gray
        self.accent_color = (72, 202, 228) # Light blue
        
    def header(self):
        """Generate PDF header with clinic information"""
        # Header background
        self.set_fill_color(*self.header_color)
        self.rect(0, 0, 210, 40, 'F')
        
        # Logo area (placeholder for future logo)
        self.set_xy(10, 8)
        self.set_font('Arial', 'B', 20)
        self.set_text_color(255, 255, 255)
        self.cell(0, 8, '🏥 ' + APP_NAME, 0, 1, 'L')
        
        # Subtitle
        self.set_font('Arial', '', 10)
        self.set_xy(10, 18)
        self.cell(0, 5, 'Professional Medical Prescription Management', 0, 1, 'L')
        
        # Contact info (right side)
        self.set_xy(120, 8)
        self.set_font('Arial', '', 9)
        self.cell(0, 4, 'Generated by MedScript Pro', 0, 1, 'R')
        self.set_xy(120, 13)
        self.cell(0, 4, f'Version {APP_VERSION}', 0, 1, 'R')
        self.set_xy(120, 18)
        self.cell(0, 4, datetime.now().strftime('%B %d, %Y at %I:%M %p'), 0, 1, 'R')
        
        # Reset colors
        self.set_text_color(*self.text_color)
        self.ln(20)
    
    def footer(self):
        """Generate PDF footer"""
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.set_text_color(128, 128, 128)
        
        # Footer text
        footer_text = f'Generated by {APP_NAME} v{APP_VERSION} on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        self.cell(0, 10, footer_text, 0, 0, 'C')
        
        # Page number
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'R')
    
    def add_section_header(self, title: str, icon: str = ""):
        """Add a styled section header"""
        self.ln(5)
        self.set_font('Arial', 'B', 12)
        self.set_fill_color(240, 248, 255)  # Light blue background
        self.set_text_color(*self.header_color)
        
        # Section header with background
        self.cell(0, 8, f'{icon} {title}', 0, 1, 'L', True)
        self.set_text_color(*self.text_color)
        self.ln(2)
    
    def add_info_row(self, label: str, value: str, bold_label: bool = True):
        """Add an information row with label and value"""
        self.set_font('Arial', 'B' if bold_label else '', 9)
        self.cell(40, 5, f'{label}:', 0, 0, 'L')
        
        self.set_font('Arial', '', 9)
        # Handle long values
        if len(str(value)) > 80:
            # Split long text
            self.cell(0, 5, str(value)[:80] + '...', 0, 1, 'L')
        else:
            self.cell(0, 5, str(value), 0, 1, 'L')
    
    def add_medication_table(self, medications: List[Dict[str, Any]]):
        """Add medications table"""
        if not medications:
            self.set_font('Arial', 'I', 9)
            self.cell(0, 5, 'No medications prescribed.', 0, 1, 'L')
            return
        
        # Table headers
        self.set_font('Arial', 'B', 9)
        self.set_fill_color(245, 245, 245)
        
        # Header row
        headers = ['Medication', 'Dosage', 'Frequency', 'Duration', 'Quantity']
        col_widths = [60, 30, 35, 25, 25]
        
        for i, header in enumerate(headers):
            self.cell(col_widths[i], 6, header, 1, 0, 'C', True)
        self.ln()
        
        # Medication rows
        self.set_font('Arial', '', 8)
        self.set_fill_color(255, 255, 255)
        
        for i, med in enumerate(medications):
            # Alternate row coloring
            if i % 2 == 1:
                self.set_fill_color(250, 250, 250)
            else:
                self.set_fill_color(255, 255, 255)
            
            # Check if we need a new page
            if self.get_y() > 250:
                self.add_page()
            
            row_data = [
                med.get('medication_name', 'Unknown')[:25],
                med.get('dosage', 'N/A')[:12],
                med.get('frequency', 'N/A')[:15],
                med.get('duration', 'N/A')[:10],
                med.get('quantity', 'N/A')[:10]
            ]
            
            for j, data in enumerate(row_data):
                self.cell(col_widths[j], 6, str(data), 1, 0, 'L', True)
            self.ln()
            
            # Add instructions if present
            if med.get('instructions'):
                self.set_font('Arial', 'I', 7)
                self.set_fill_color(255, 255, 255)
                self.cell(10, 4, '', 0, 0)  # Indent
                self.cell(0, 4, f"Instructions: {med.get('instructions')[:100]}", 0, 1, 'L')
                self.set_font('Arial', '', 8)
    
    def add_lab_tests_table(self, lab_tests: List[Dict[str, Any]]):
        """Add lab tests table"""
        if not lab_tests:
            self.set_font('Arial', 'I', 9)
            self.cell(0, 5, 'No lab tests ordered.', 0, 1, 'L')
            return
        
        # Table headers
        self.set_font('Arial', 'B', 9)
        self.set_fill_color(245, 245, 245)
        
        headers = ['Test Name', 'Urgency', 'Instructions']
        col_widths = [70, 25, 80]
        
        for i, header in enumerate(headers):
            self.cell(col_widths[i], 6, header, 1, 0, 'C', True)
        self.ln()
        
        # Lab test rows
        self.set_font('Arial', '', 8)
        
        for i, test in enumerate(lab_tests):
            # Alternate row coloring
            if i % 2 == 1:
                self.set_fill_color(250, 250, 250)
            else:
                self.set_fill_color(255, 255, 255)
            
            # Check if we need a new page
            if self.get_y() > 250:
                self.add_page()
            
            urgency = test.get('urgency', 'Routine')
            urgency_color = self.text_color
            if urgency.upper() == 'STAT':
                urgency_color = (220, 53, 69)  # Red
            elif urgency.upper() == 'URGENT':
                urgency_color = (255, 193, 7)  # Orange
            
            # Test name
            self.cell(col_widths[0], 6, test.get('test_name', 'Unknown')[:30], 1, 0, 'L', True)
            
            # Urgency (with color)
            self.set_text_color(*urgency_color)
            self.cell(col_widths[1], 6, urgency, 1, 0, 'C', True)
            self.set_text_color(*self.text_color)
            
            # Instructions
            instructions = test.get('instructions', 'Standard procedure')[:35]
            self.cell(col_widths[2], 6, instructions, 1, 0, 'L', True)
            self.ln()

class PDFGenerationService:
    """Service for generating prescription PDFs"""
    
    def __init__(self):
        self.enable_qr_codes = FEATURE_FLAGS.get('ENABLE_QR_CODES', True)
    
    def generate_prescription_pdf(self, prescription_data: Dict[str, Any]) -> bytes:
        """
        Generate prescription PDF
        
        Args:
            prescription_data (Dict[str, Any]): Complete prescription data
        
        Returns:
            bytes: PDF file as bytes
        """
        try:
            # Create PDF instance
            pdf = PrescriptionPDF(prescription_data)
            pdf.add_page()
            
            # Add prescription header
            self._add_prescription_header(pdf, prescription_data)
            
            # Add doctor information
            self._add_doctor_information(pdf, prescription_data.get('doctor', {}))
            
            # Add patient information
            self._add_patient_information(pdf, prescription_data.get('patient', {}))
            
            # Add prescription details
            self._add_prescription_details(pdf, prescription_data)
            
            # Add medications
            self._add_medications_section(pdf, prescription_data.get('medications', []))
            
            # Add lab tests
            self._add_lab_tests_section(pdf, prescription_data.get('lab_tests', []))
            
            # Add notes and instructions
            self._add_notes_section(pdf, prescription_data)
            
            # Add QR code if enabled
            if self.enable_qr_codes:
                self._add_qr_code(pdf, prescription_data)
            
            # Add signatures section
            self._add_signatures_section(pdf)
            
            # Get PDF as bytes
            pdf_bytes = pdf.output(dest='S').encode('latin-1')
            return pdf_bytes
        
        except Exception as e:
            st.error(f"PDF generation failed: {str(e)}")
            raise
    
    def _add_prescription_header(self, pdf: PrescriptionPDF, prescription_data: Dict[str, Any]):
        """Add prescription header section"""
        pdf.add_section_header("MEDICAL PRESCRIPTION", "📋")
        
        # Prescription ID and date
        prescription_id = prescription_data.get('prescription_id', 'Unknown')
        created_date = prescription_data.get('created_at', datetime.now())
        
        if isinstance(created_date, str):
            try:
                created_date = datetime.fromisoformat(created_date.replace('Z', '+00:00'))
            except:
                created_date = datetime.now()
        
        pdf.add_info_row("Prescription ID", prescription_id)
        pdf.add_info_row("Date Issued", format_date_display(created_date, 'long'))
        pdf.ln(3)
    
    def _add_doctor_information(self, pdf: PrescriptionPDF, doctor_data: Dict[str, Any]):
        """Add doctor information section"""
        pdf.add_section_header("PRESCRIBING PHYSICIAN", "👨‍⚕️")
        
        doctor_name = format_user_name(doctor_data.get('full_name', 'Unknown Doctor'), 'doctor')
        pdf.add_info_row("Doctor", doctor_name)
        
        if doctor_data.get('specialization'):
            pdf.add_info_row("Specialization", doctor_data['specialization'])
        
        if doctor_data.get('medical_license'):
            pdf.add_info_row("Medical License", doctor_data['medical_license'])
        
        if doctor_data.get('phone'):
            pdf.add_info_row("Phone", format_phone_number(doctor_data['phone']))
        
        if doctor_data.get('email'):
            pdf.add_info_row("Email", doctor_data['email'])
        
        pdf.ln(3)
    
    def _add_patient_information(self, pdf: PrescriptionPDF, patient_data: Dict[str, Any]):
        """Add patient information section"""
        pdf.add_section_header("PATIENT INFORMATION", "👤")
        
        # Patient name and ID
        patient_name = format_patient_name(
            patient_data.get('first_name', ''), 
            patient_data.get('last_name', '')
        )
        pdf.add_info_row("Patient Name", patient_name)
        pdf.add_info_row("Patient ID", patient_data.get('patient_id', 'Unknown'))
        
        # Demographics
        if patient_data.get('date_of_birth'):
            dob = format_date_display(patient_data['date_of_birth'])
            from utils.helpers import calculate_age
            age = calculate_age(patient_data['date_of_birth'])
            pdf.add_info_row("Date of Birth", f"{dob} (Age: {age})")
        
        if patient_data.get('gender'):
            pdf.add_info_row("Gender", patient_data['gender'])
        
        # Contact information
        if patient_data.get('phone'):
            pdf.add_info_row("Phone", format_phone_number(patient_data['phone']))
        
        if patient_data.get('address'):
            address = patient_data['address'][:80]  # Truncate long addresses
            pdf.add_info_row("Address", address)
        
        # Medical information
        if patient_data.get('allergies'):
            allergies = patient_data['allergies']
            if allergies.lower() not in ['none', 'none known', 'nka']:
                pdf.set_text_color(220, 53, 69)  # Red for allergies
                pdf.add_info_row("⚠️ ALLERGIES", allergies.upper())
                pdf.set_text_color(*pdf.text_color)
            else:
                pdf.add_info_row("Allergies", "None known")
        
        if patient_data.get('medical_conditions'):
            conditions = patient_data['medical_conditions'][:100]  # Truncate
            pdf.add_info_row("Medical Conditions", conditions)
        
        pdf.ln(3)
    
    def _add_prescription_details(self, pdf: PrescriptionPDF, prescription_data: Dict[str, Any]):
        """Add prescription details section"""
        pdf.add_section_header("PRESCRIPTION DETAILS", "📝")
        
        # Diagnosis
        if prescription_data.get('diagnosis'):
            pdf.add_info_row("Diagnosis", prescription_data['diagnosis'])
        
        # Chief complaint
        if prescription_data.get('chief_complaint'):
            pdf.add_info_row("Chief Complaint", prescription_data['chief_complaint'])
        
        # Status
        if prescription_data.get('status'):
            pdf.add_info_row("Status", prescription_data['status'])
        
        pdf.ln(3)
    
    def _add_medications_section(self, pdf: PrescriptionPDF, medications: List[Dict[str, Any]]):
        """Add medications section"""
        pdf.add_section_header(f"MEDICATIONS PRESCRIBED ({len(medications)})", "💊")
        pdf.add_medication_table(medications)
        pdf.ln(5)
    
    def _add_lab_tests_section(self, pdf: PrescriptionPDF, lab_tests: List[Dict[str, Any]]):
        """Add lab tests section"""
        if lab_tests:
            pdf.add_section_header(f"LABORATORY TESTS ORDERED ({len(lab_tests)})", "🧪")
            pdf.add_lab_tests_table(lab_tests)
            pdf.ln(5)
    
    def _add_notes_section(self, pdf: PrescriptionPDF, prescription_data: Dict[str, Any]):
        """Add notes and instructions section"""
        has_notes = (prescription_data.get('notes') or 
                    prescription_data.get('follow_up_instructions') or 
                    prescription_data.get('follow_up_date'))
        
        if has_notes:
            pdf.add_section_header("NOTES & INSTRUCTIONS", "📌")
            
            if prescription_data.get('notes'):
                pdf.set_font('Arial', '', 9)
                pdf.multi_cell(0, 5, f"Notes: {prescription_data['notes']}")
                pdf.ln(2)
            
            if prescription_data.get('follow_up_instructions'):
                pdf.set_font('Arial', '', 9)
                pdf.multi_cell(0, 5, f"Follow-up Instructions: {prescription_data['follow_up_instructions']}")
                pdf.ln(2)
            
            if prescription_data.get('follow_up_date'):
                follow_up_date = format_date_display(prescription_data['follow_up_date'])
                pdf.add_info_row("Follow-up Date", follow_up_date)
            
            pdf.ln(3)
    
    def _add_qr_code(self, pdf: PrescriptionPDF, prescription_data: Dict[str, Any]):
        """Add QR code for prescription verification"""
        try:
            # Create QR code data
            qr_data = {
                'prescription_id': prescription_data.get('prescription_id'),
                'patient_id': prescription_data.get('patient', {}).get('patient_id'),
                'doctor_id': prescription_data.get('doctor', {}).get('id'),
                'created_at': prescription_data.get('created_at'),
                'verification_url': f"https://medscript-pro.app/verify/{prescription_data.get('prescription_id')}"
            }
            
            # Generate QR code
            qr = qrcode.QRCode(version=1, box_size=3, border=1)
            qr.add_data(str(qr_data))
            qr.make(fit=True)
            
            # Create QR code image
            qr_img = qr.make_image(fill_color="black", back_color="white")
            
            # Save QR code to temporary bytes
            qr_bytes = io.BytesIO()
            qr_img.save(qr_bytes, format='PNG')
            qr_bytes.seek(0)
            
            # Add QR code to PDF
            pdf.ln(5)
            pdf.set_font('Arial', 'B', 9)
            pdf.cell(0, 5, 'Prescription Verification QR Code:', 0, 1, 'L')
            
            # Add QR code image (simplified - in production would need proper image handling)
            pdf.set_font('Arial', 'I', 8)
            pdf.cell(0, 5, 'QR Code: Scan to verify prescription authenticity', 0, 1, 'L')
            pdf.cell(0, 5, f'Verification ID: {prescription_data.get("prescription_id", "N/A")}', 0, 1, 'L')
        
        except Exception:
            # QR code generation failed, add text verification instead
            pdf.ln(5)
            pdf.set_font('Arial', 'B', 9)
            pdf.cell(0, 5, 'Prescription Verification:', 0, 1, 'L')
            pdf.set_font('Arial', '', 8)
            pdf.cell(0, 5, f'Verification ID: {prescription_data.get("prescription_id", "N/A")}', 0, 1, 'L')
    
    def _add_signatures_section(self, pdf: PrescriptionPDF):
        """Add signatures section"""
        pdf.ln(10)
        pdf.add_section_header("SIGNATURES", "✍️")
        
        # Doctor signature
        pdf.set_font('Arial', '', 9)
        pdf.cell(0, 5, 'Doctor Signature: ________________________________', 0, 1, 'L')
        pdf.ln(3)
        pdf.cell(0, 5, 'Date: _______________', 0, 1, 'L')
        pdf.ln(8)
        
        # Pharmacist signature
        pdf.cell(0, 5, 'Pharmacist Signature: ________________________________', 0, 1, 'L')
        pdf.ln(3)
        pdf.cell(0, 5, 'Date Dispensed: _______________', 0, 1, 'L')
        pdf.ln(5)
        
        # Disclaimer
        pdf.set_font('Arial', 'I', 7)
        pdf.set_text_color(128, 128, 128)
        pdf.multi_cell(0, 3, 
            "This prescription was generated electronically by MedScript Pro. "
            "Please verify the authenticity using the verification ID above. "
            "For questions or concerns, contact the prescribing physician.")

def generate_prescription_pdf(prescription_data: Dict[str, Any]) -> bytes:
    """
    Generate prescription PDF (convenience function)
    
    Args:
        prescription_data (Dict[str, Any]): Complete prescription data
    
    Returns:
        bytes: PDF file as bytes
    """
    if not FEATURE_FLAGS.get('ENABLE_PDF_GENERATION', True):
        raise Exception("PDF generation is disabled")
    
    pdf_service = PDFGenerationService()
    return pdf_service.generate_prescription_pdf(prescription_data)

def create_download_link(pdf_bytes: bytes, filename: str) -> str:
    """
    Create download link for PDF
    
    Args:
        pdf_bytes (bytes): PDF file bytes
        filename (str): Download filename
    
    Returns:
        str: Download link HTML
    """
    import base64
    
    b64_pdf = base64.b64encode(pdf_bytes).decode()
    download_link = f"""
    <a href="data:application/pdf;base64,{b64_pdf}" 
       download="{filename}" 
       style="text-decoration: none;">
        <button style="
            background: linear-gradient(45deg, #0096C7, #48CAE4);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        ">
            📄 Download Prescription PDF
        </button>
    </a>
    """
    return download_link

def get_pdf_filename(prescription_data: Dict[str, Any]) -> str:
    """
    Generate appropriate filename for prescription PDF
    
    Args:
        prescription_data (Dict[str, Any]): Prescription data
    
    Returns:
        str: Filename for PDF
    """
    prescription_id = prescription_data.get('prescription_id', 'Unknown')
    patient_name = format_patient_name(
        prescription_data.get('patient', {}).get('first_name', ''),
        prescription_data.get('patient', {}).get('last_name', '')
    )
    
    # Clean filename
    safe_patient_name = "".join(c for c in patient_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    safe_patient_name = safe_patient_name.replace(' ', '_')
    
    date_str = datetime.now().strftime('%Y%m%d')
    
    return f"Prescription_{prescription_id}_{safe_patient_name}_{date_str}.pdf"

def validate_prescription_data(prescription_data: Dict[str, Any]) -> Tuple[bool, List[str]]:
    """
    Validate prescription data before PDF generation
    
    Args:
        prescription_data (Dict[str, Any]): Prescription data to validate
    
    Returns:
        Tuple[bool, List[str]]: (is_valid, error_messages)
    """
    errors = []
    
    # Required fields
    if not prescription_data.get('prescription_id'):
        errors.append("Prescription ID is required")
    
    if not prescription_data.get('doctor'):
        errors.append("Doctor information is required")
    elif not prescription_data['doctor'].get('full_name'):
        errors.append("Doctor name is required")
    
    if not prescription_data.get('patient'):
        errors.append("Patient information is required")
    else:
        patient = prescription_data['patient']
        if not patient.get('first_name') or not patient.get('last_name'):
            errors.append("Patient name is required")
        if not patient.get('patient_id'):
            errors.append("Patient ID is required")
    
    if not prescription_data.get('diagnosis'):
        errors.append("Diagnosis is required")
    
    # Check if medications or lab tests exist
    medications = prescription_data.get('medications', [])
    lab_tests = prescription_data.get('lab_tests', [])
    
    if not medications and not lab_tests:
        errors.append("At least one medication or lab test must be prescribed")
    
    return len(errors) == 0, errors

def get_pdf_preview_data(prescription_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Get preview data for PDF without generating the full PDF
    
    Args:
        prescription_data (Dict[str, Any]): Prescription data
    
    Returns:
        Dict[str, Any]: Preview information
    """
    medications = prescription_data.get('medications', [])
    lab_tests = prescription_data.get('lab_tests', [])
    
    preview = {
        'prescription_id': prescription_data.get('prescription_id', 'Unknown'),
        'doctor_name': format_user_name(
            prescription_data.get('doctor', {}).get('full_name', 'Unknown'), 
            'doctor'
        ),
        'patient_name': format_patient_name(
            prescription_data.get('patient', {}).get('first_name', ''),
            prescription_data.get('patient', {}).get('last_name', '')
        ),
        'diagnosis': prescription_data.get('diagnosis', 'Not specified'),
        'medication_count': len(medications),
        'lab_test_count': len(lab_tests),
        'created_date': format_date_display(
            prescription_data.get('created_at', datetime.now())
        ),
        'estimated_pages': max(1, (len(medications) + len(lab_tests)) // 10 + 1)
    }
    
    return preview